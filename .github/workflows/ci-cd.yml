name: CI/CD

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      ref:
        description: "Git ref to deploy (branch, tag, or SHA)"
        required: false
        default: "main"
      build_image:
        description: "Build & push image before deploy?"
        required: false
        type: boolean
        default: true

jobs:
  backend-ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Validate JSON files
        run: |
          find . -name "*.json" -exec python -m json.tool {} \; > /dev/null
          echo "✅ All JSON files are valid"

      - name: Quick CI sanity check
        run: echo "CI ran on $GITHUB_SHA"

  coverage-badge:
    runs-on: ubuntu-latest
    needs: backend-ci
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        run: python -m pip install --upgrade pip uv

      - name: Create venv & sync deps
        working-directory: backend
        run: |
          uv venv --python 3.12
          uv sync || true
          uv pip install -U pytest pytest-cov genbadge[coverage]

      - name: Run tests with coverage (from backend/)
        working-directory: backend
        continue-on-error: true
        run: |
          uv run pytest -q --cov=app --cov-report=xml --cov-fail-under=60
          test -f coverage.xml

      - name: Generate SVG badge at repo root
        working-directory: backend
        continue-on-error: true
        run: |
          mkdir -p ../docs
          if [ -f coverage.xml ]; then
            uv run genbadge coverage -i coverage.xml -o ../docs/coverage.svg
            ls -l ../docs/coverage.svg
          else
            echo "⚠️  coverage.xml not found, skipping badge generation"
          fi

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: coverage-artifacts
          path: |
            backend/coverage.xml
            docs/coverage.svg

      - name: Commit badge to main (main or manual main)
        if: ${{ github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.ref == '' || github.event.inputs.ref == 'main')) }}
        continue-on-error: true
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          if [ -f docs/coverage.svg ]; then
            git add -A docs/coverage.svg
            if git diff --cached --quiet; then
              echo "No badge change detected."
            else
              git commit -m "chore(ci): update coverage badge [skip ci]"
              git push || echo "⚠️  Failed to push coverage badge update"
            fi
          else
            echo "⚠️  Coverage badge file not found, skipping commit"
          fi

      - name: Coverage job summary
        if: always()
        run: |
          echo "## Coverage Badge Job Summary" >> $GITHUB_STEP_SUMMARY

          if [ -f backend/coverage.xml ]; then
            echo "✅ Coverage tests completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️  Coverage tests failed - coverage.xml not generated" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f docs/coverage.svg ]; then
            echo "✅ Coverage badge generated successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️  Coverage badge generation failed or skipped" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** This job is configured to continue on error to prevent blocking deployments." >> $GITHUB_STEP_SUMMARY

  backend-deploy:
    needs: backend-ci
    runs-on: ubuntu-latest
    if: >
      ${{
        (github.event_name == 'push' && github.ref == 'refs/heads/main')
        || github.event_name == 'workflow_dispatch'
      }}
    defaults:
      run:
        working-directory: backend
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || 'main' }}

      - name: Google Cloud auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Docker auth for Artifact Registry
        run: gcloud auth configure-docker ${{ secrets.GAR_LOCATION }}-docker.pkg.dev

      - name: Build & push backend image
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          IMAGE_SHA=${{ secrets.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/family-tree/family-tree-api:${SHORT_SHA}
          IMAGE_MAIN=${{ secrets.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/family-tree/family-tree-api:main
          echo "IMAGE=$IMAGE_SHA" >> $GITHUB_ENV
          docker build -t "$IMAGE_SHA" -t "$IMAGE_MAIN" .
          docker push "$IMAGE_SHA"
          docker push "$IMAGE_MAIN"

      - name: Deploy to Cloud Run
        shell: bash
        env:
          SERVICE_NAME: ${{ secrets.CLOUD_RUN_SERVICE }}
          REGION: ${{ secrets.CLOUD_RUN_REGION }}
          IMAGE: ${{ env.IMAGE }}
          ENV_GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          ENV_ENABLE_MAP: ${{ secrets.ENABLE_MAP || 'false' }}
          ENV_GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY || '' }}
          ENV_FRONTEND_URL: ${{ secrets.FRONTEND_URL || 'http://localhost:3000' }}
          ENV_SMTP_HOST: ${{ secrets.SMTP_HOST || '' }}
          ENV_SMTP_PORT: ${{ secrets.SMTP_PORT || '587' }}
          ENV_SMTP_USER: ${{ secrets.SMTP_USER || '' }}
          ENV_SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD || '' }}
          ENV_EMAIL_FROM: ${{ secrets.EMAIL_FROM || '' }}
          ENV_EMAIL_FROM_NAME: ${{ secrets.EMAIL_FROM_NAME || '' }}
        run: |
          set -euo pipefail

          # Validate/clean service name
          SERVICE_NAME_CLEAN=$(printf '%s' "$SERVICE_NAME" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
          if printf '%s' "$SERVICE_NAME_CLEAN" | grep -q '[A-Z]'; then
            echo "Invalid CLOUD_RUN_SERVICE: '$SERVICE_NAME' (uppercase not allowed)"; exit 1; fi
          if ! printf '%s' "$SERVICE_NAME_CLEAN" | grep -Eq '^[a-z][a-z0-9-]*$'; then
            echo "Invalid CLOUD_RUN_SERVICE: '$SERVICE_NAME' (must start with a letter and use [a-z0-9-])"; exit 1; fi
          if printf '%s' "$SERVICE_NAME_CLEAN" | grep -Eq '--$'; then
            echo "Invalid CLOUD_RUN_SERVICE: '$SERVICE_NAME' (may not end with '-')"; exit 1; fi
          if [ ${#SERVICE_NAME_CLEAN} -gt 63 ]; then
            echo "Invalid CLOUD_RUN_SERVICE length ${#SERVICE_NAME_CLEAN} > 63"; exit 1; fi

          # Trim helper
          clean() { printf '%s' "$1" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'; }

          GCP_PROJECT=$(clean "$ENV_GCP_PROJECT_ID")
          ENABLE_MAP=$(clean "$ENV_ENABLE_MAP")
          GOOGLE_MAPS_API_KEY=$(clean "$ENV_GOOGLE_MAPS_API_KEY")
          FRONTEND_URL=$(clean "$ENV_FRONTEND_URL")
          SMTP_HOST=$(clean "$ENV_SMTP_HOST")
          SMTP_PORT=$(clean "$ENV_SMTP_PORT")
          SMTP_USER=$(clean "$ENV_SMTP_USER")
          SMTP_PASSWORD=$(clean "$ENV_SMTP_PASSWORD")
          EMAIL_FROM=$(clean "$ENV_EMAIL_FROM")
          EMAIL_FROM_NAME=$(clean "$ENV_EMAIL_FROM_NAME")

          # Compose env vars with custom delimiter to avoid comma parsing
          SET_ENV_VARS="^|^GOOGLE_CLOUD_PROJECT=${GCP_PROJECT}|FIRESTORE_DATABASE=family-tree|ENABLE_MAP=${ENABLE_MAP}|GOOGLE_MAPS_API_KEY=${GOOGLE_MAPS_API_KEY}|FRONTEND_URL=${FRONTEND_URL}|SMTP_HOST=${SMTP_HOST}|SMTP_PORT=${SMTP_PORT}|SMTP_USER=${SMTP_USER}|SMTP_PASSWORD=${SMTP_PASSWORD}|EMAIL_FROM=${EMAIL_FROM}|EMAIL_FROM_NAME=${EMAIL_FROM_NAME}|USE_EMAIL_IN_DEV=true"

          # Deploy (explicit --project)
          gcloud run deploy "${SERVICE_NAME_CLEAN}" \
            --image "${IMAGE}" \
            --project "${GCP_PROJECT}" \
            --region "${REGION}" \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars "${SET_ENV_VARS}"

      - name: Print Cloud Run URL (robust)
        shell: bash
        env:
          SERVICE_NAME: ${{ secrets.CLOUD_RUN_SERVICE }}
          REGION: ${{ secrets.CLOUD_RUN_REGION }}
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          set -euo pipefail

          SERVICE_NAME="$(printf '%s' "${SERVICE_NAME:-}" | tr -d '\r\n' | xargs)"
          REGION="$(printf '%s' "${REGION:-}" | tr -d '\r\n' | xargs)"
          PROJECT_ID="$(printf '%s' "${PROJECT_ID:-}" | tr -d '\r\n' | xargs)"

          echo "Project: [$PROJECT_ID]"
          echo "Region : [$REGION]"
          echo "Service: [$SERVICE_NAME]"

          if ! gcloud run services describe "$SERVICE_NAME" \
               --project "$PROJECT_ID" --region "$REGION" >/dev/null 2>&1; then
            echo "Service not found in $PROJECT_ID/$REGION. Available services:"
            gcloud run services list --platform=managed \
              --project "$PROJECT_ID" \
              --format='table(metadata.name,location,status.url)'
            exit 1
          fi

          URL="$(gcloud run services describe "$SERVICE_NAME" \
            --project "$PROJECT_ID" --region "$REGION" \
            --format='value(status.url)')"
          echo "Service is live at: $URL"

  frontend-deploy:
    needs: backend-deploy
    runs-on: ubuntu-latest
    if: >
      ${{
        (github.event_name == 'push' && github.ref == 'refs/heads/main')
        || github.event_name == 'workflow_dispatch'
      }}
    defaults:
      run:
        working-directory: frontend
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || 'main' }}

      - name: Google Cloud auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Docker auth for Artifact Registry
        run: gcloud auth configure-docker ${{ secrets.GAR_LOCATION }}-docker.pkg.dev

      - name: Get backend URL (robust)
        shell: bash
        env:
          SERVICE_NAME: ${{ secrets.CLOUD_RUN_SERVICE }}
          REGION: ${{ secrets.CLOUD_RUN_REGION }}
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          set -euo pipefail
          SERVICE_NAME="$(printf '%s' "${SERVICE_NAME:-}" | tr -d '\r\n' | xargs)"
          REGION="$(printf '%s' "${REGION:-}" | tr -d '\r\n' | xargs)"
          PROJECT_ID="$(printf '%s' "${PROJECT_ID:-}" | tr -d '\r\n' | xargs)"

          if ! gcloud run services describe "$SERVICE_NAME" \
               --project "$PROJECT_ID" --region "$REGION" >/dev/null 2>&1; then
            echo "Backend service not found in $PROJECT_ID/$REGION. Available services:"
            gcloud run services list --platform=managed \
              --project "$PROJECT_ID" \
              --format='table(metadata.name,location,status.url)'
            exit 1
          fi
          BACKEND_URL="$(gcloud run services describe "$SERVICE_NAME" \
            --project "$PROJECT_ID" --region "$REGION" \
            --format='value(status.url)')"
          echo "Found backend at: $BACKEND_URL"
          echo "BACKEND_URL=$BACKEND_URL" >> "$GITHUB_ENV"

      - name: Build & push frontend image
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          FRONTEND_IMAGE_SHA=${{ secrets.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/family-tree/family-tree-web:${SHORT_SHA}
          FRONTEND_IMAGE_MAIN=${{ secrets.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/family-tree/family-tree-web:main
          echo "FRONTEND_IMAGE=$FRONTEND_IMAGE_SHA" >> $GITHUB_ENV
          docker build \
            --build-arg NEXT_PUBLIC_API_BASE="$BACKEND_URL" \
            -t "$FRONTEND_IMAGE_SHA" \
            -t "$FRONTEND_IMAGE_MAIN" \
            .
          docker push "$FRONTEND_IMAGE_SHA"
          docker push "$FRONTEND_IMAGE_MAIN"

      - name: Deploy frontend to Cloud Run
        run: |
          gcloud run deploy family-tree-web \
            --image "$FRONTEND_IMAGE" \
            --project ${{ secrets.GCP_PROJECT_ID }} \
            --region ${{ secrets.CLOUD_RUN_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 3000

      - name: Print Frontend Cloud Run URL (robust)
        shell: bash
        env:
          REGION: ${{ secrets.CLOUD_RUN_REGION }}
          PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        run: |
          set -euo pipefail
          REGION="$(printf '%s' "${REGION:-}" | tr -d '\r\n' | xargs)"
          PROJECT_ID="$(printf '%s' "${PROJECT_ID:-}" | tr -d '\r\n' | xargs)"
          SERVICE_NAME="family-tree-web"

          if ! gcloud run services describe "$SERVICE_NAME" \
               --project "$PROJECT_ID" --region "$REGION" >/dev/null 2>&1; then
            echo "Frontend service not found in $PROJECT_ID/$REGION. Available services:"
            gcloud run services list --platform=managed \
              --project "$PROJECT_ID" \
              --format='table(metadata.name,location,status.url)'
            exit 1
          fi

          FRONTEND_URL="$(gcloud run services describe "$SERVICE_NAME" \
            --project "$PROJECT_ID" --region "$REGION" \
            --format='value(status.url)')"
          echo "Frontend is live at: $FRONTEND_URL"
