name: CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      ref:
        description: "Git ref to deploy (branch, tag, or SHA)"
        required: false
        default: "main"
      build_image:
        description: "Build & push image before deploy?"
        required: false
        type: boolean
        default: true

jobs:
  backend-ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Quick CI sanity check
        run: echo "CI ran on $GITHUB_SHA"

  coverage-badge:
    runs-on: ubuntu-latest
    needs: backend-ci
    permissions:
      contents: write   # needed to commit docs/coverage.svg
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # install uv only; avoid global installs (PEP 668 on runners)
      - name: Install uv
        run: python -m pip install --upgrade pip uv

      # create a venv inside backend/ and install deps within it
      - name: Create venv & sync deps
        working-directory: backend
        run: |
          uv venv --python 3.12
          # Install project deps (if pyproject/uv.lock exist)
          uv sync || true
          # Ensure test & badge tools are present in the venv
          uv pip install -U pytest pytest-cov genbadge[coverage]

      - name: Run tests with coverage (from backend/)
        working-directory: backend
        run: |
          # adjust --cov target if your package name differs
          uv run pytest -q --cov=app --cov-report=xml
          test -f coverage.xml

      - name: Generate SVG badge at repo root
        working-directory: backend
        run: |
          mkdir -p ../docs
          uv run genbadge coverage -i coverage.xml -o ../docs/coverage.svg
          ls -l ../docs/coverage.svg

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-artifacts
          path: |
            backend/coverage.xml
            docs/coverage.svg

      - name: Commit badge to main (only on main)
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          if git diff --quiet docs/coverage.svg; then
            echo "No badge change."
          else
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add docs/coverage.svg
            git commit -m "chore(ci): update coverage badge [skip ci]"
            git push
          fi

  backend-deploy:
    needs: backend-ci
    runs-on: ubuntu-latest
    if: >
      ${{
        (github.event_name == 'push' && github.ref == 'refs/heads/main')
        || github.event_name == 'workflow_dispatch'
      }}
    defaults:
      run:
        working-directory: backend
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || 'main' }}

      - name: Google Cloud auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Docker auth for Artifact Registry
        run: gcloud auth configure-docker ${{ secrets.GAR_LOCATION }}-docker.pkg.dev

      - name: Build & push image (optional)
        if: ${{ inputs.build_image != false }}
        run: |
          IMAGE=${{ secrets.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/family-tree/family-tree-api:$(git rev-parse --short HEAD)
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          docker build -t "$IMAGE" .
          docker push "$IMAGE"

      - name: Use existing image if not building
        if: ${{ inputs.build_image == false }}
        run: |
          IMAGE=${{ secrets.GAR_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/family-tree/family-tree-api:main
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ secrets.CLOUD_RUN_SERVICE }} \
            --image "$IMAGE" \
            --region ${{ secrets.CLOUD_RUN_REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars "GOOGLE_CLOUD_PROJECT=${{ secrets.GCP_PROJECT_ID }},FIRESTORE_DATABASE=family-tree"

      - name: Print Cloud Run URL
        run: |
          URL=$(gcloud run services describe ${{ secrets.CLOUD_RUN_SERVICE }} \
            --region ${{ secrets.CLOUD_RUN_REGION }} \
            --format='value(status.url)')
          echo "Service is live at: $URL"
